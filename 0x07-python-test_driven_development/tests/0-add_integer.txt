Testing ```0-add_integer``` python file

=================================


Checking docstring mod:
    >>> __import__('0-add_integer').__doc__ != None
    True

Import add_integer function:

    >>> add_integer = __import__('0-add_integer').add_integer

check functions docstring:

    >>> add_integer.__doc__ != None
    True

Basic - use function:

    >>> add_integer(2, 1)
    3

Basic - use with negative numbers:

    >>> add_integer(-5, -6)
    -11

Basic - use with complex numbers:

    >>> add_integer(12j, 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(1j)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Float testing:

    >>> add_integer(1.84, 2.2)
    3

Float infinitive:

    >>> add_integer(float('inf'), 3)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Type string(a):

    >>> add_integer("Hello")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Diferent types:

    >>> add_integer("Hello", 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(0, "Hello")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Diferent that 2 arguments:

    >>> add_integer(0, 2, 3)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Not arguments passed:

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Argument None passed:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
